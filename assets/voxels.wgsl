struct Voxel {
    flags: u32;
    density: f32;
};

struct VoxelBuffer {
    data: array<Voxel>;
};

struct VertexBuffer {
    data: array<vec3<f32>>;
};

struct NormalBuffer {
    data: array<vec3<f32>>;
};

struct IndexBuffer {
    data: array<u32>;
};

struct Atomics {
    vertices_head: atomic<u32>;
    indices_head: atomic<u32>;
};

[[group(0), binding(0)]]
var<storage, read> in_voxels: VoxelBuffer;

[[group(0), binding(1)]]
var<storage, read_write> out_vertices: VertexBuffer;

[[group(0), binding(2)]]
var<storage, read_write> out_normals: NormalBuffer;

[[group(0), binding(3)]]
var<storage, read_write> out_indices: IndexBuffer;

[[group(0), binding(4)]]
var<storage, read_write> global_atomics: Atomics;

fn get_flat_index(pos: vec3<i32>) -> u32 {
    return u32(pos.x + pos.y * 32 + pos.z * 32 * 32);
}

fn get_voxel_density(pos: vec3<i32>) -> f32 {
    var density: f32 = 0.0;
    if (pos.x >= 0 && pos.x < 32
     && pos.y >= 0 && pos.y < 32
     && pos.z >= 0 && pos.z < 32) {
        density = in_voxels.data[get_flat_index(pos)].density;
    }
    return density;
}

fn interp_vertex(p1: vec3<f32>, p2: vec3<f32>, v1: f32, v2: f32) -> vec3<f32> {
    let mu = (0.5 - v1) / (v2 - v1);
    return p1 + mu * (p2 - p1);
}

let smooth_adj_offsets = array<vec3<i32>, 8>(
    vec3<i32>(0, 0, 1),
    vec3<i32>(1, 0, 1),
    vec3<i32>(1, 0, 0),
    vec3<i32>(0, 0, 0),
    vec3<i32>(0, 1, 1),
    vec3<i32>(1, 1, 1),
    vec3<i32>(1, 1, 0),
    vec3<i32>(0, 1, 0)
);

[[stage(compute), workgroup_size(8, 8, 8)]]
fn main([[builtin(global_invocation_id)]] invocation_id: vec3<u32>) {

    var block_faces = array<array<vec3<f32>, 4>, 6>(
        array<vec3<f32>, 4>(
            vec3<f32>(0.5, -0.5, -0.5),
            vec3<f32>(0.5, 0.5, -0.5),
            vec3<f32>(0.5, 0.5, 0.5),
            vec3<f32>(0.5, -0.5, 0.5),
        ),
        array<vec3<f32>, 4>(
            vec3<f32>(-0.5, -0.5, 0.5),
            vec3<f32>(-0.5, 0.5, 0.5),
            vec3<f32>(-0.5, 0.5, -0.5),
            vec3<f32>(-0.5, -0.5, -0.5)
        ),
        array<vec3<f32>, 4>(
            vec3<f32>(-0.5, 0.5, 0.5),
            vec3<f32>(0.5, 0.5, 0.5),
            vec3<f32>(0.5, 0.5, -0.5),
            vec3<f32>(-0.5, 0.5, -0.5)
        ),
        array<vec3<f32>, 4>(
            vec3<f32>(-0.5, -0.5, -0.5),
            vec3<f32>(0.5, -0.5, -0.5),
            vec3<f32>(0.5, -0.5, 0.5),
            vec3<f32>(-0.5, -0.5, 0.5)
        ),
        array<vec3<f32>, 4>(
                vec3<f32>(0.5, -0.5, 0.5),
                vec3<f32>(0.5, 0.5, 0.5),
                vec3<f32>(-0.5, 0.5, 0.5),
                vec3<f32>(-0.5, -0.5, 0.5)
        ),
        array<vec3<f32>, 4>(
                vec3<f32>(-0.5, -0.5, -0.5),
                vec3<f32>(-0.5, 0.5, -0.5),
                vec3<f32>(0.5, 0.5, -0.5),
                vec3<f32>(0.5, -0.5, -0.5)
        ),
    );

    var block_adj_offsets = array<vec3<i32>, 6>(
        vec3<i32>(1, 0, 0),
        vec3<i32>(-1, 0, 0),
        vec3<i32>(0, 1, 0),
        vec3<i32>(0, -1, 0),
        vec3<i32>(0, 0, 1),
        vec3<i32>(0, 0, -1),
    );

    var edge_table = array<u32, 256>(
        0x000u, 0x109u, 0x203u, 0x30au, 0x406u, 0x50fu, 0x605u, 0x70cu,
        0x80cu, 0x905u, 0xa0fu, 0xb06u, 0xc0au, 0xd03u, 0xe09u, 0xf00u,
        0x190u, 0x099u, 0x393u, 0x29au, 0x596u, 0x49fu, 0x795u, 0x69cu,
        0x99cu, 0x895u, 0xb9fu, 0xa96u, 0xd9au, 0xc93u, 0xf99u, 0xe90u,
        0x230u, 0x339u, 0x033u, 0x13au, 0x636u, 0x73fu, 0x435u, 0x53cu,
        0xa3cu, 0xb35u, 0x83fu, 0x936u, 0xe3au, 0xf33u, 0xc39u, 0xd30u,
        0x3a0u, 0x2a9u, 0x1a3u, 0x0aau, 0x7a6u, 0x6afu, 0x5a5u, 0x4acu,
        0xbacu, 0xaa5u, 0x9afu, 0x8a6u, 0xfaau, 0xea3u, 0xda9u, 0xca0u,
        0x460u, 0x569u, 0x663u, 0x76au, 0x066u, 0x16fu, 0x265u, 0x36cu,
        0xc6cu, 0xd65u, 0xe6fu, 0xf66u, 0x86au, 0x963u, 0xa69u, 0xb60u,
        0x5f0u, 0x4f9u, 0x7f3u, 0x6fau, 0x1f6u, 0x0ffu, 0x3f5u, 0x2fcu,
        0xdfcu, 0xcf5u, 0xfffu, 0xef6u, 0x9fau, 0x8f3u, 0xbf9u, 0xaf0u,
        0x650u, 0x759u, 0x453u, 0x55au, 0x256u, 0x35fu, 0x055u, 0x15cu,
        0xe5cu, 0xf55u, 0xc5fu, 0xd56u, 0xa5au, 0xb53u, 0x859u, 0x950u,
        0x7c0u, 0x6c9u, 0x5c3u, 0x4cau, 0x3c6u, 0x2cfu, 0x1c5u, 0x0ccu,
        0xfccu, 0xec5u, 0xdcfu, 0xcc6u, 0xbcau, 0xac3u, 0x9c9u, 0x8c0u,
        0x8c0u, 0x9c9u, 0xac3u, 0xbcau, 0xcc6u, 0xdcfu, 0xec5u, 0xfccu,
        0x0ccu, 0x1c5u, 0x2cfu, 0x3c6u, 0x4cau, 0x5c3u, 0x6c9u, 0x7c0u,
        0x950u, 0x859u, 0xb53u, 0xa5au, 0xd56u, 0xc5fu, 0xf55u, 0xe5cu,
        0x15cu, 0x055u, 0x35fu, 0x256u, 0x55au, 0x453u, 0x759u, 0x650u,
        0xaf0u, 0xbf9u, 0x8f3u, 0x9fau, 0xef6u, 0xfffu, 0xcf5u, 0xdfcu,
        0x2fcu, 0x3f5u, 0x0ffu, 0x1f6u, 0x6fau, 0x7f3u, 0x4f9u, 0x5f0u,
        0xb60u, 0xa69u, 0x963u, 0x86au, 0xf66u, 0xe6fu, 0xd65u, 0xc6cu,
        0x36cu, 0x265u, 0x16fu, 0x066u, 0x76au, 0x663u, 0x569u, 0x460u,
        0xca0u, 0xda9u, 0xea3u, 0xfaau, 0x8a6u, 0x9afu, 0xaa5u, 0xbacu,
        0x4acu, 0x5a5u, 0x6afu, 0x7a6u, 0x0aau, 0x1a3u, 0x2a9u, 0x3a0u,
        0xd30u, 0xc39u, 0xf33u, 0xe3au, 0x936u, 0x83fu, 0xb35u, 0xa3cu,
        0x53cu, 0x435u, 0x73fu, 0x636u, 0x13au, 0x033u, 0x339u, 0x230u,
        0xe90u, 0xf99u, 0xc93u, 0xd9au, 0xa96u, 0xb9fu, 0x895u, 0x99cu,
        0x69cu, 0x795u, 0x49fu, 0x596u, 0x29au, 0x393u, 0x099u, 0x190u,
        0xf00u, 0xe09u, 0xd03u, 0xc0au, 0xb06u, 0xa0fu, 0x905u, 0x80cu,
        0x70cu, 0x605u, 0x50fu, 0x406u, 0x30au, 0x203u, 0x109u, 0x000u
    );

    var triangle_table = array<array<i32, 16>, 256>(
        array<i32, 16>(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1),
        array<i32, 16>(8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1),
        array<i32, 16>(3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1),
        array<i32, 16>(4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1),
        array<i32, 16>(4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1),
        array<i32, 16>(9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1),
        array<i32, 16>(10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1),
        array<i32, 16>(5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1),
        array<i32, 16>(5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1),
        array<i32, 16>(8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1),
        array<i32, 16>(2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1),
        array<i32, 16>(2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1),
        array<i32, 16>(11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1),
        array<i32, 16>(5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1),
        array<i32, 16>(11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1),
        array<i32, 16>(11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1),
        array<i32, 16>(2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1),
        array<i32, 16>(6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1),
        array<i32, 16>(3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1),
        array<i32, 16>(6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1),
        array<i32, 16>(6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1),
        array<i32, 16>(8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1),
        array<i32, 16>(7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1),
        array<i32, 16>(3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1),
        array<i32, 16>(0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1),
        array<i32, 16>(9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1),
        array<i32, 16>(8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1),
        array<i32, 16>(5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1),
        array<i32, 16>(0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1),
        array<i32, 16>(6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1),
        array<i32, 16>(10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1),
        array<i32, 16>(1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1),
        array<i32, 16>(0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1),
        array<i32, 16>(3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1),
        array<i32, 16>(6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1),
        array<i32, 16>(9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1),
        array<i32, 16>(8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1),
        array<i32, 16>(3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1),
        array<i32, 16>(10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1),
        array<i32, 16>(10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1),
        array<i32, 16>(2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1),
        array<i32, 16>(7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1),
        array<i32, 16>(2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1),
        array<i32, 16>(1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1),
        array<i32, 16>(11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1),
        array<i32, 16>(8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1),
        array<i32, 16>(0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1),
        array<i32, 16>(7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1),
        array<i32, 16>(7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1),
        array<i32, 16>(10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1),
        array<i32, 16>(0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1),
        array<i32, 16>(7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1),
        array<i32, 16>(6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1),
        array<i32, 16>(4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1),
        array<i32, 16>(10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1),
        array<i32, 16>(8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1),
        array<i32, 16>(1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1),
        array<i32, 16>(10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1),
        array<i32, 16>(10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1),
        array<i32, 16>(9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1),
        array<i32, 16>(7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1),
        array<i32, 16>(3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1),
        array<i32, 16>(7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1),
        array<i32, 16>(3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1),
        array<i32, 16>(6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1),
        array<i32, 16>(9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1),
        array<i32, 16>(1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1),
        array<i32, 16>(4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1),
        array<i32, 16>(7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1),
        array<i32, 16>(6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1),
        array<i32, 16>(0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1),
        array<i32, 16>(6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1),
        array<i32, 16>(0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1),
        array<i32, 16>(11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1),
        array<i32, 16>(6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1),
        array<i32, 16>(5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1),
        array<i32, 16>(9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1),
        array<i32, 16>(1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1),
        array<i32, 16>(10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1),
        array<i32, 16>(0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1),
        array<i32, 16>(11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1),
        array<i32, 16>(9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1),
        array<i32, 16>(7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1),
        array<i32, 16>(2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1),
        array<i32, 16>(9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1),
        array<i32, 16>(9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1),
        array<i32, 16>(1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1),
        array<i32, 16>(0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1),
        array<i32, 16>(10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1),
        array<i32, 16>(2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1),
        array<i32, 16>(0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1),
        array<i32, 16>(0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1),
        array<i32, 16>(9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1),
        array<i32, 16>(5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1),
        array<i32, 16>(5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1),
        array<i32, 16>(8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1),
        array<i32, 16>(9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1),
        array<i32, 16>(1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1),
        array<i32, 16>(3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1),
        array<i32, 16>(4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1),
        array<i32, 16>(9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1),
        array<i32, 16>(11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1),
        array<i32, 16>(2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1),
        array<i32, 16>(9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1),
        array<i32, 16>(3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1),
        array<i32, 16>(1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1),
        array<i32, 16>(4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1),
        array<i32, 16>(0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1),
        array<i32, 16>(1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        array<i32, 16>(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
    );

    let pos = vec3<i32>(invocation_id);
    let voxel = in_voxels.data[get_flat_index(pos)];

    if (voxel.flags == 0u) {
        var cube_idx: u32 = 0u;
        var orient: u32 = 0u;
        let positions = array<vec3<f32>, 8>(
            vec3<f32>(pos + smooth_adj_offsets[0u]),
            vec3<f32>(pos + smooth_adj_offsets[1u]),
            vec3<f32>(pos + smooth_adj_offsets[2u]),
            vec3<f32>(pos + smooth_adj_offsets[3u]),
            vec3<f32>(pos + smooth_adj_offsets[4u]),
            vec3<f32>(pos + smooth_adj_offsets[5u]),
            vec3<f32>(pos + smooth_adj_offsets[6u]),
            vec3<f32>(pos + smooth_adj_offsets[7u]),
        );
        let densities = array<f32, 8>(
            get_voxel_density(pos + smooth_adj_offsets[0u]),
            get_voxel_density(pos + smooth_adj_offsets[1u]),
            get_voxel_density(pos + smooth_adj_offsets[2u]),
            get_voxel_density(pos + smooth_adj_offsets[3u]),
            get_voxel_density(pos + smooth_adj_offsets[4u]),
            get_voxel_density(pos + smooth_adj_offsets[5u]),
            get_voxel_density(pos + smooth_adj_offsets[6u]),
            get_voxel_density(pos + smooth_adj_offsets[7u]),
        );
        cube_idx = cube_idx | u32(densities[0u] < 0.5) * (1u << 0u);
        cube_idx = cube_idx | u32(densities[1u] < 0.5) * (1u << 1u);
        cube_idx = cube_idx | u32(densities[2u] < 0.5) * (1u << 2u);
        cube_idx = cube_idx | u32(densities[3u] < 0.5) * (1u << 3u);
        cube_idx = cube_idx | u32(densities[4u] < 0.5) * (1u << 4u);
        cube_idx = cube_idx | u32(densities[5u] < 0.5) * (1u << 5u);
        cube_idx = cube_idx | u32(densities[6u] < 0.5) * (1u << 6u);
        cube_idx = cube_idx | u32(densities[7u] < 0.5) * (1u << 7u);

        if (cube_idx == 0x00u || cube_idx == 0xffu) {
            return;
        }

        var vertices = array<vec3<f32>, 12>(
            f32((edge_table[cube_idx] & (1u <<  0u)) != 0u) * interp_vertex(positions[0u], positions[1u], densities[0u], densities[1u]),
            f32((edge_table[cube_idx] & (1u <<  1u)) != 0u) * interp_vertex(positions[1u], positions[2u], densities[1u], densities[2u]),
            f32((edge_table[cube_idx] & (1u <<  2u)) != 0u) * interp_vertex(positions[2u], positions[3u], densities[2u], densities[3u]),
            f32((edge_table[cube_idx] & (1u <<  3u)) != 0u) * interp_vertex(positions[3u], positions[0u], densities[3u], densities[0u]),
            f32((edge_table[cube_idx] & (1u <<  4u)) != 0u) * interp_vertex(positions[4u], positions[5u], densities[4u], densities[5u]),
            f32((edge_table[cube_idx] & (1u <<  5u)) != 0u) * interp_vertex(positions[5u], positions[6u], densities[5u], densities[6u]),
            f32((edge_table[cube_idx] & (1u <<  6u)) != 0u) * interp_vertex(positions[6u], positions[7u], densities[6u], densities[7u]),
            f32((edge_table[cube_idx] & (1u <<  7u)) != 0u) * interp_vertex(positions[7u], positions[4u], densities[7u], densities[4u]),
            f32((edge_table[cube_idx] & (1u <<  8u)) != 0u) * interp_vertex(positions[0u], positions[4u], densities[0u], densities[4u]),
            f32((edge_table[cube_idx] & (1u <<  9u)) != 0u) * interp_vertex(positions[1u], positions[5u], densities[1u], densities[5u]),
            f32((edge_table[cube_idx] & (1u << 10u)) != 0u) * interp_vertex(positions[2u], positions[6u], densities[2u], densities[6u]),
            f32((edge_table[cube_idx] & (1u << 11u)) != 0u) * interp_vertex(positions[3u], positions[7u], densities[3u], densities[7u]),
        );

        var tri_idx: u32 = 0u;
        loop {
            var start_vert_idx = atomicAdd(&global_atomics.vertices_head, 3u);
            var start_indices_idx = atomicAdd(&global_atomics.indices_head, 3u);

            let v0 = vertices[ triangle_table[cube_idx][tri_idx + 0u] ];
            let v1 = vertices[ triangle_table[cube_idx][tri_idx + 1u] ];
            let v2 = vertices[ triangle_table[cube_idx][tri_idx + 2u] ];

            out_vertices.data[start_vert_idx + 0u] = v0;
            out_vertices.data[start_vert_idx + 1u] = v1;
            out_vertices.data[start_vert_idx + 2u] = v2;

            out_indices.data[start_indices_idx + 0u] = start_vert_idx + 0u;
            out_indices.data[start_indices_idx + 1u] = start_vert_idx + 1u;
            out_indices.data[start_indices_idx + 2u] = start_vert_idx + 2u;

            let normal = cross(v0 - v1, v0 - v2);
            out_normals.data[start_vert_idx + 0u] = normal;
            out_normals.data[start_vert_idx + 1u] = normal;
            out_normals.data[start_vert_idx + 2u] = normal;

            tri_idx = tri_idx + 3u;
            if (triangle_table[cube_idx][tri_idx] == -1) {
                break;
            }
        }
    } else {
        var dir: u32 = 0u;  
        loop {
            let adj_pos = pos + block_adj_offsets[dir];
            let adj_density = get_voxel_density(pos);

            if (adj_density < 0.5) {
                var pos = vec3<f32>(invocation_id);

                let start_vert_idx = atomicAdd(&global_atomics.vertices_head, 4u);
                let start_indices_idx = atomicAdd(&global_atomics.indices_head, 6u);

                let v0 = block_faces[dir][0u];
                let v1 = block_faces[dir][1u];
                let v2 = block_faces[dir][2u];
                let v3 = block_faces[dir][3u];

                out_vertices.data[start_vert_idx + 0u] = pos + v0;
                out_vertices.data[start_vert_idx + 1u] = pos + v1;
                out_vertices.data[start_vert_idx + 2u] = pos + v2;
                out_vertices.data[start_vert_idx + 3u] = pos + v3;

                let normal = cross(v0 - v1, v0 - v2);
                out_normals.data[start_vert_idx + 0u] = normal;
                out_normals.data[start_vert_idx + 1u] = normal;
                out_normals.data[start_vert_idx + 2u] = normal;
                out_normals.data[start_vert_idx + 3u] = normal;

                out_indices.data[start_indices_idx + 0u] = start_vert_idx + 0u;
                out_indices.data[start_indices_idx + 1u] = start_vert_idx + 1u;
                out_indices.data[start_indices_idx + 2u] = start_vert_idx + 2u;
                out_indices.data[start_indices_idx + 3u] = start_vert_idx + 0u;
                out_indices.data[start_indices_idx + 4u] = start_vert_idx + 2u;
                out_indices.data[start_indices_idx + 5u] = start_vert_idx + 3u;
            }

            dir = dir + 1u;
            if (dir >= 6u) {
                break;
            }
        }
    }
}
